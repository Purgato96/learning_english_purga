version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: purga_database
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: learn_english_global
      POSTGRES_USER: purga_user
      POSTGRES_PASSWORD: purga_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - purga_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: purga_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - purga_network

  # Laravel Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: purga_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/var/www/html
      - backend_vendor:/var/www/html/vendor
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=pgsql
      - DB_HOST=database
      - DB_PORT=5432
      - DB_DATABASE=learn_english_global
      - DB_USERNAME=purga_user
      - DB_PASSWORD=purga_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - database
      - redis
    networks:
      - purga_network

  # Vue 3 Frontend SPA
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: purga_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000/api
      - VITE_APP_URL=http://localhost:3000
    depends_on:
      - backend
    networks:
      - purga_network

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: purga_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - purga_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_vendor:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  purga_network:
    driver: bridge