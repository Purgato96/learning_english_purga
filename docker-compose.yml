# docker-compose.yml (V2 - sem 'version')
services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: purga_database
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: learn_english_global
      POSTGRES_USER: purga_user
      POSTGRES_PASSWORD: purga_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - purga_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: purga_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - purga_network

  # Laravel Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: purga_backend
    restart: unless-stopped
    ports:
      - "8000:8000"        # http://localhost:8000
    volumes:
      - ./backend:/var/www/html
      # Se quiser evitar conflitos com vendor local, remova a linha acima e use apenas:
      # - backend_vendor:/var/www/html/vendor
    environment:
      APP_ENV: local
      APP_DEBUG: "true"
      APP_URL: http://localhost:8000
      DB_CONNECTION: pgsql
      DB_HOST: database
      DB_PORT: 5432
      DB_DATABASE: learn_english_global
      DB_USERNAME: purga_user
      DB_PASSWORD: purga_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # opcional: QUEUE_CONNECTION=redis
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - purga_network

  # Vue 3 Frontend SPA (Vite dev em 3000)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: purga_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"        # http://localhost:3000
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      VITE_API_URL: http://localhost:8000/api
      VITE_APP_URL: http://localhost:3000
      VITE_HOST: 0.0.0.0
      VITE_PORT: "3000"
    depends_on:
      backend:
        condition: service_started
    networks:
      - purga_network

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: purga_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI -> http://localhost:8025
    networks:
      - purga_network

volumes:
  postgres_data:
  redis_data:
  backend_vendor:
  frontend_node_modules:

networks:
  purga_network:
    driver: bridge
